#!/usr/bin/env python

import re
import os
import sys

from subprocess import check_output
from subprocess import call
from subprocess import Popen
from subprocess import PIPE

from getpass import getpass

from tempfile import NamedTemporaryFile

from git import Repo
from github import Github

from github.GithubException import UnknownObjectException


import github
#github.enable_console_debug_logging()

PR_REGEX = re.compile("``` diff.*```", re.DOTALL)
GITHUB_TOKEN = os.path.expanduser("~/.git_pull_req_auth")
github = None

if not os.path.exists(GITHUB_TOKEN):

    user = raw_input("GitHub username: ")
    pw = getpass("GitHub password: ")

    github = Github(user, pw)
    user = github.get_user()

    auth = user.create_authorization(
            scopes=["repo"],
            note="git-update-pr",
            note_url="https://github.com/cozybit/cozyreview")

    open(GITHUB_TOKEN, 'w').write(auth.token)

    token = auth.token

else:

    token = open(GITHUB_TOKEN, 'r').read()


github = Github(token)

user = github.get_user()
print 'Username:', user.login

try:
    gitrepo = Repo(os.getcwd())
except:
    sys.stderr.write('ERROR: Failed to find git repository\n')
    sys.exit(1)

try:
    remote_url = gitrepo.config_reader().get('remote "origin"', "url")
except:
    sys.stderr.write("ERROR: Failed to find remote named 'origin'\n")
    sys.exit(1)

if not remote_url.startswith("git@github.com"):
    sys.stderr.write("ERROR: Expected remote to start with 'git@github.com'\n")
    sys.exit(1)

if not remote_url.endswith(".git"):
    sys.stderr.write("ERROR: Expected remote to end with '.git'\n")
    sys.exit(1)

if ':' not in remote_url:
    sys.stderr.write("ERROR: Expected remote contain ':'\n")
    sys.exit(1)

_, orgprojgit = remote_url.split(":")
orgname, projgit = orgprojgit.split('/')
projname = projgit.rstrip(".git")

try:
    org = github.get_organization(orgname)
except UnknownObjectException:
    org = github.get_user(orgname)

ghrepo = org.get_repo(projname)

print 'Project:', ghrepo.html_url

active_branch_name = gitrepo.active_branch.name

os.spawnvp(os.P_WAIT, "git", ["git", "remote", "update", "origin"])

cmd = ["git", "cherry", "origin/" + active_branch_name, active_branch_name]
has_new_commits = 0 < len(check_output(cmd).splitlines())

for pr in ghrepo.get_pulls():

    org_name, branch_name = pr.head.label.split(":")
    if branch_name != active_branch_name:
        continue
    
    updated_patch = check_output(
            ["git", "format-patch", "--stdout", "origin/master" ])

    new_pr_diff = "``` diff\n" + updated_patch + "```"
    updated_pr_body = PR_REGEX.sub(new_pr_diff, pr.body)

    editor = "vi"
    if 'EDITOR' in os.environ:
        editor = os.environ['EDITOR']

    fp, fp_orig = NamedTemporaryFile(), NamedTemporaryFile()

    title = pr.title + "\n\n"
    fp.write(title)
    fp.write(updated_pr_body)
    
    fp.flush()
    fp.seek(0)
    fp_orig.write(fp.read())

    fp_orig.flush()

    exit_code = os.spawnvp(os.P_WAIT, editor, [editor, fp.name])
    if exit_code != 0:
        sys.stderr.write("ERROR: Editor was aborted\n")
        sys.exit(1)

    exit_code = Popen(["diff", "-w", fp_orig.name, fp.name], stdout=PIPE, stderr=PIPE).wait()
    if exit_code == 0:
        sys.stderr.write("ERROR: Pull request body not modified\n")
        sys.exit(1)

    fp.seek(0)

    lines = fp.read().splitlines()
    updated_title, updated_pr_body = lines[0], str.join("\n", lines[1:]).strip()

    pr.edit(title=updated_title, body=updated_pr_body)
    pr.create_issue_comment(updated_pr_body)
